name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/*

pr:
  paths:
    include:
      - src/*
      - build/ci-build.yml

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Build Configuration'
  # Always use fixed version for .NET Core SDK
  - name: 'DotNet.Sdk.Version'
    value: '2.2.402'
  - name: 'Project'
    value: 'Arcus.Templates'
  - name: 'Http.Port'
    value: '5000'
  - name: 'Arcus_Api_BaseUrl'
    value: 'http://localhost:$(Http.Port)/api/v1'
  # 'Package.Version.ManualTrigger' is added as queue-time variable on build in Azure DevOps

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - template: nuget/determine-pr-version.yml@templates
            parameters:
              manualTriggerVersion: $(Package.Version.ManualTrigger)
          - template: 'build/build-solution.yml@templates'
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              versionSuffix: '$(packageVersion)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/bin/**/*.nupkg'
              targetFolder: '$(Pipeline.Workspace)/templates'
              flattenFolders: true
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/templates'
              artifactName: Templates

  - stage: DockerIntegrationTests
    displayName: Docker Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunIntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Templates'
              path: '$(Build.SourcesDirectory)/templates'
          - task: DotNetCoreInstaller@0
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version)) in web API template'
            inputs:
              version: '$(DotNet.Sdk.Version)'
          - task: DotNetCoreCLI@2
            displayName: 'Install template'
            inputs:
              command: 'custom'
              custom: 'new'
              arguments: '-i "templates/*.nupkg"'
          - task: DotNetCoreCLI@2
            displayName: 'Create new project from template'
            inputs:
              command: 'custom'
              custom: 'new'
              arguments: 'arcus-webapi -n MyProject -o /MyProject'
          - task: Docker@1
            displayName: 'Build Docker image from newly created web API project from template'
            inputs:
              dockerFile: /MyProject/Dockerfile
              imageName: 'myproject:$(Build.BuildId)'
          - task: Docker@1
            displayName: 'Run new web API project Docker image from template'
            inputs:
              command: 'Run an image'
              imageName: 'myproject:$(Build.BuildId)'
              containerName: 'myproject'
              ports: '$(Http.Port):$(Http.Port)'
              envVars: |
                ARCUS_HTTP_PORT=$(Http.Port)
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Docker'

  - stage: SelfContainingIntegrationTests
    displayName: Self-Containing Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunIntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Integration'

  - stage: ReleaseToMyget
    displayName: 'Release to MyGet'
    dependsOn:
      - DockerIntegrationTests
      - SelfContainingIntegrationTests
    condition: succeeded()
    jobs:
      - job: PushToMyGet
        displayName: 'Push to MyGet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Templates'
              path: '$(Build.SourcesDirectory)/templates'
          - template: nuget/publish-preview-package.yml@templates
            parameters:
              packagesToPush: 'templates/*.nupkg'
