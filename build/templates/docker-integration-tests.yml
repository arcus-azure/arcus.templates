stages:
  - stage: DockerIntegrationTests
    displayName: Docker Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunIntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Templates'
              path: '$(Build.SourcesDirectory)/templates'
          - task: DotNetCoreInstaller@0
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
            inputs:
              version: '$(DotNet.Sdk.Version)'
          - task: DotNetCoreCLI@2
            displayName: 'Install template'
            inputs:
              command: 'custom'
              custom: 'new'
              arguments: '-i "templates/*.nupkg"'
          - template: 'run-new-project-from-template.yml'
            parameters:
              projectName: 'Arcus.Demo.WebApi'
              projectAlias: 'arcus-webapi'
              ports: '$(Http.Port):$(Http.Port)'
              envVars: |
                ARCUS_HTTP_PORT=$(Http.Port)
          - template: 'run-new-project-from-template.yml'
            parameters:
              projectName: 'Arcus.Demo.ServiceBus.Queue'
              projectAlias: 'arcus-servicebus-queue'
              ports: '$(Arcus.ServiceBus.Queue.Worker.HealthPort):$(Arcus.ServiceBus.Queue.Worker.HealthPort)'
              script: |
                Get-Content './Arcus.Demo.ServiceBus.Queue/Program.cs' | 
                  Where-Object { $_ -notmatch '#error' -and $_ -notmatch 'secretProvider: null' -and $_ -notmatch 'EmptyMessageHandler' -and $_ -notmatch 'AddServiceBusQueueMessagePump' } | 
                  Set-Content './Arcus.Demo.ServiceBus.Queue/Program.cs'
              envVars: |
                ARCUS_HEALTH_PORT=$(Arcus.ServiceBus.Queue.Worker.HealthPort)
                EVENTGRID_TOPIC_URI=$(Arcus.TestInfra.EventGrid.Topic.Uri)
                EVENTGRID_AUTH_KEY=$(Arcus.TestInfra.EventGrid.Auth.Key)
                ARCUS_SERVICEBUS_CONNECTIONSTRING=$(Arcus.ServiceBus.ConnectionStringWithQueue)
                TELEMETRY_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY=$(Arcus.ApplicationInsights.InstrumentationKey)
          - template: 'run-new-project-from-template.yml'
            parameters:
              projectName: 'Arcus.Demo.ServiceBus.Topic'
              projectAlias: 'arcus-servicebus-topic'
              ports: '$(Arcus.ServiceBus.Topic.Worker.HealthPort):$(Arcus.ServiceBus.Topic.Worker.HealthPort)'
              script: |
                Get-Content './Arcus.Demo.ServiceBus.Topic/Program.cs' | 
                  Where-Object { $_ -notmatch '#error' -and $_ -notmatch 'secretProvider: null' -and $_ -notmatch 'EmptyMessageHandler' -and $_ -notmatch 'AddServiceBusTopicMessagePump' } | 
                  Set-Content './Arcus.Demo.ServiceBus.Topic/Program.cs'
              envVars: |
                ARCUS_HEALTH_PORT=$(Arcus.ServiceBus.Topic.Worker.HealthPort)
                EVENTGRID_TOPIC_URI=$(Arcus.TestInfra.EventGrid.Topic.Uri)
                EVENTGRID_AUTH_KEY=$(Arcus.TestInfra.EventGrid.Auth.Key)
                ARCUS_SERVICEBUS_CONNECTIONSTRING=$(Arcus.ServiceBus.ConnectionStringWithTopic)
                TELEMETRY_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY=$(Arcus.ApplicationInsights.InstrumentationKey)
          - template: 'run-new-project-from-template.yml'
            parameters:
              projectName: 'Arcus.Demo.AzureFunctions.Databricks.JobMetrics'
              projectAlias: 'arcus-az-databricks-jobmetrics'
              ports: '$(Arcus.AzureFunctions.Databricks.Http.Port):80'
              script: |
                Get-Content './Arcus.Demo.AzureFunctions.Databricks.JobMetrics/Startup.cs' |
                  Where-Object { $_ -notmatch '#error' } |
                  Set-Content './Arcus.Demo.AzureFunctions.Databricks.JobMetrics/Startup.cs'
              envVars: |
                Arcus__Databricks__Url=$(Arcus.Databricks.Url)
                Arcus__ApplicationInsights__MetricName=$(Arcus.ApplicationInsights.MetricName)
                Arcus__ApplicationInsights__InstrumentationKey=$(Arcus.ApplicationInsights.InstrumentationKey)
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Docker'